stages:
  - build
  - lint
  - test

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_PROJECT_PATH
  IMAGE_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA

before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - echo "StrictHostKeyChecking no" >> ~/.ssh/config


build:
  stage: build
  image: docker:19.03.12
  services:
    - docker:dind
  script:
    - export IMAGE_NAME_LOWER=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
    - export IMAGE_TAG_LOWER=$(echo "$IMAGE_TAG" | tr '[:upper:]' '[:lower:]')
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME_LOWER:$IMAGE_TAG_LOWER .
    - docker push $IMAGE_NAME_LOWER:$IMAGE_TAG_LOWER
  only:
    - main

lint:
  stage: lint
  image: python:3.11
  script:
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry install
    - poetry run flake8
  only:
    - main

test:
  stage: test
  image: docker:19.03.12
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker-compose
  script:
    - echo "DB_USER=$DB_USER" > .env
    - echo "DB_PASSWORD=$DB_PASSWORD" >> .env
    - echo "DB_NAME=$DB_NAME" >> .env
    - echo "DB_HOST=$DB_HOST" >> .env
    - echo "DB_PORT=$DB_PORT" >> .env
    - echo "SECRET_KEY=$SECRET_KEY" >> .env
    - echo "BROKER_ID=$BROKER_ID" >> .env
    - echo "BROKER_API_KEY=$BROKER_API_KEY" >> .env
    - echo "BROKER_SECRET_KEY=$BROKER_SECRET_KEY" >> .env
    - docker-compose -f docker-compose.yml up -d db
    - docker-compose -f docker-compose.yml run --rm backend poetry run pytest
  after_script:
    - docker-compose -f docker-compose.yml down
  only:
    - main
